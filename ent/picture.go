// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lagzi/EntSymbolBug/ent/component"
	"github.com/lagzi/EntSymbolBug/ent/picture"
	"github.com/lagzi/EntSymbolBug/ent/user"
)

// Picture is the model entity for the Picture schema.
type Picture struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// OtherImportantThing holds the value of the "other_important_thing" field.
	OtherImportantThing string `json:"other_important_thing,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PictureQuery when eager-loading is set.
	Edges              PictureEdges `json:"edges"`
	component_pictures *int
	user_user_picture  *int
}

// PictureEdges holds the relations/edges for other nodes in the graph.
type PictureEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Component holds the value of the component edge.
	Component *Component `json:"component,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PictureEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ComponentOrErr returns the Component value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PictureEdges) ComponentOrErr() (*Component, error) {
	if e.loadedTypes[1] {
		if e.Component == nil {
			// The edge component was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: component.Label}
		}
		return e.Component, nil
	}
	return nil, &NotLoadedError{edge: "component"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Picture) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case picture.FieldID:
			values[i] = new(sql.NullInt64)
		case picture.FieldOtherImportantThing:
			values[i] = new(sql.NullString)
		case picture.FieldCreateTime, picture.FieldUpdateTime, picture.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case picture.ForeignKeys[0]: // component_pictures
			values[i] = new(sql.NullInt64)
		case picture.ForeignKeys[1]: // user_user_picture
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Picture", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Picture fields.
func (pi *Picture) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case picture.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case picture.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pi.CreateTime = value.Time
			}
		case picture.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pi.UpdateTime = value.Time
			}
		case picture.FieldOtherImportantThing:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_important_thing", values[i])
			} else if value.Valid {
				pi.OtherImportantThing = value.String
			}
		case picture.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				pi.Timestamp = value.Time
			}
		case picture.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field component_pictures", value)
			} else if value.Valid {
				pi.component_pictures = new(int)
				*pi.component_pictures = int(value.Int64)
			}
		case picture.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_picture", value)
			} else if value.Valid {
				pi.user_user_picture = new(int)
				*pi.user_user_picture = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Picture entity.
func (pi *Picture) QueryUser() *UserQuery {
	return (&PictureClient{config: pi.config}).QueryUser(pi)
}

// QueryComponent queries the "component" edge of the Picture entity.
func (pi *Picture) QueryComponent() *ComponentQuery {
	return (&PictureClient{config: pi.config}).QueryComponent(pi)
}

// Update returns a builder for updating this Picture.
// Note that you need to call Picture.Unwrap() before calling this method if this Picture
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *Picture) Update() *PictureUpdateOne {
	return (&PictureClient{config: pi.config}).UpdateOne(pi)
}

// Unwrap unwraps the Picture entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *Picture) Unwrap() *Picture {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: Picture is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *Picture) String() string {
	var builder strings.Builder
	builder.WriteString("Picture(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("create_time=")
	builder.WriteString(pi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("other_important_thing=")
	builder.WriteString(pi.OtherImportantThing)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(pi.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Pictures is a parsable slice of Picture.
type Pictures []*Picture

func (pi Pictures) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
