// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/lagzi/EntSymbolBug/ent/workercontainedinformation"
	"github.com/lagzi/EntSymbolBug/ent/workernetworksettings"
)

// WorkerNetworkSettings is the model entity for the WorkerNetworkSettings schema.
type WorkerNetworkSettings struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkerNetworkSettingsQuery when eager-loading is set.
	Edges                                         WorkerNetworkSettingsEdges `json:"edges"`
	worker_contained_information_network_settings *int
}

// WorkerNetworkSettingsEdges holds the relations/edges for other nodes in the graph.
type WorkerNetworkSettingsEdges struct {
	// WorkerContainedInformation holds the value of the worker_contained_information edge.
	WorkerContainedInformation *WorkerContainedInformation `json:"worker_contained_information,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WorkerContainedInformationOrErr returns the WorkerContainedInformation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkerNetworkSettingsEdges) WorkerContainedInformationOrErr() (*WorkerContainedInformation, error) {
	if e.loadedTypes[0] {
		if e.WorkerContainedInformation == nil {
			// The edge worker_contained_information was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workercontainedinformation.Label}
		}
		return e.WorkerContainedInformation, nil
	}
	return nil, &NotLoadedError{edge: "worker_contained_information"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkerNetworkSettings) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workernetworksettings.FieldID:
			values[i] = new(sql.NullInt64)
		case workernetworksettings.ForeignKeys[0]: // worker_contained_information_network_settings
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WorkerNetworkSettings", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkerNetworkSettings fields.
func (wns *WorkerNetworkSettings) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workernetworksettings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wns.ID = int(value.Int64)
		case workernetworksettings.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field worker_contained_information_network_settings", value)
			} else if value.Valid {
				wns.worker_contained_information_network_settings = new(int)
				*wns.worker_contained_information_network_settings = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryWorkerContainedInformation queries the "worker_contained_information" edge of the WorkerNetworkSettings entity.
func (wns *WorkerNetworkSettings) QueryWorkerContainedInformation() *WorkerContainedInformationQuery {
	return (&WorkerNetworkSettingsClient{config: wns.config}).QueryWorkerContainedInformation(wns)
}

// Update returns a builder for updating this WorkerNetworkSettings.
// Note that you need to call WorkerNetworkSettings.Unwrap() before calling this method if this WorkerNetworkSettings
// was returned from a transaction, and the transaction was committed or rolled back.
func (wns *WorkerNetworkSettings) Update() *WorkerNetworkSettingsUpdateOne {
	return (&WorkerNetworkSettingsClient{config: wns.config}).UpdateOne(wns)
}

// Unwrap unwraps the WorkerNetworkSettings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wns *WorkerNetworkSettings) Unwrap() *WorkerNetworkSettings {
	_tx, ok := wns.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkerNetworkSettings is not a transactional entity")
	}
	wns.config.driver = _tx.drv
	return wns
}

// String implements the fmt.Stringer.
func (wns *WorkerNetworkSettings) String() string {
	var builder strings.Builder
	builder.WriteString("WorkerNetworkSettings(")
	builder.WriteString(fmt.Sprintf("id=%v", wns.ID))
	builder.WriteByte(')')
	return builder.String()
}

// WorkerNetworkSettingsSlice is a parsable slice of WorkerNetworkSettings.
type WorkerNetworkSettingsSlice []*WorkerNetworkSettings

func (wns WorkerNetworkSettingsSlice) config(cfg config) {
	for _i := range wns {
		wns[_i].config = cfg
	}
}
