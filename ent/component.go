// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lagzi/EntSymbolBug/ent/component"
)

// Component is the model entity for the Component schema.
type Component struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// SomeID holds the value of the "some_id" field.
	SomeID uint64 `json:"some_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ComponentQuery when eager-loading is set.
	Edges ComponentEdges `json:"edges"`
}

// ComponentEdges holds the relations/edges for other nodes in the graph.
type ComponentEdges struct {
	// Pictures holds the value of the pictures edge.
	Pictures []*Picture `json:"pictures,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PicturesOrErr returns the Pictures value or an error if the edge
// was not loaded in eager-loading.
func (e ComponentEdges) PicturesOrErr() ([]*Picture, error) {
	if e.loadedTypes[0] {
		return e.Pictures, nil
	}
	return nil, &NotLoadedError{edge: "pictures"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Component) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case component.FieldID, component.FieldSomeID:
			values[i] = new(sql.NullInt64)
		case component.FieldCreateTime, component.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Component", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Component fields.
func (c *Component) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case component.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case component.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case component.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case component.FieldSomeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field some_id", values[i])
			} else if value.Valid {
				c.SomeID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryPictures queries the "pictures" edge of the Component entity.
func (c *Component) QueryPictures() *PictureQuery {
	return (&ComponentClient{config: c.config}).QueryPictures(c)
}

// Update returns a builder for updating this Component.
// Note that you need to call Component.Unwrap() before calling this method if this Component
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Component) Update() *ComponentUpdateOne {
	return (&ComponentClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Component entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Component) Unwrap() *Component {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Component is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Component) String() string {
	var builder strings.Builder
	builder.WriteString("Component(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("some_id=")
	builder.WriteString(fmt.Sprintf("%v", c.SomeID))
	builder.WriteByte(')')
	return builder.String()
}

// Components is a parsable slice of Component.
type Components []*Component

func (c Components) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
