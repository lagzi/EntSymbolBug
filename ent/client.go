// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/lagzi/EntSymbolBug/ent/migrate"

	"github.com/lagzi/EntSymbolBug/ent/workercontainedinformation"
	"github.com/lagzi/EntSymbolBug/ent/workernetworksettings"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// WorkerContainedInformation is the client for interacting with the WorkerContainedInformation builders.
	WorkerContainedInformation *WorkerContainedInformationClient
	// WorkerNetworkSettings is the client for interacting with the WorkerNetworkSettings builders.
	WorkerNetworkSettings *WorkerNetworkSettingsClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.WorkerContainedInformation = NewWorkerContainedInformationClient(c.config)
	c.WorkerNetworkSettings = NewWorkerNetworkSettingsClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                        ctx,
		config:                     cfg,
		WorkerContainedInformation: NewWorkerContainedInformationClient(cfg),
		WorkerNetworkSettings:      NewWorkerNetworkSettingsClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                        ctx,
		config:                     cfg,
		WorkerContainedInformation: NewWorkerContainedInformationClient(cfg),
		WorkerNetworkSettings:      NewWorkerNetworkSettingsClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		WorkerContainedInformation.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.WorkerContainedInformation.Use(hooks...)
	c.WorkerNetworkSettings.Use(hooks...)
}

// WorkerContainedInformationClient is a client for the WorkerContainedInformation schema.
type WorkerContainedInformationClient struct {
	config
}

// NewWorkerContainedInformationClient returns a client for the WorkerContainedInformation from the given config.
func NewWorkerContainedInformationClient(c config) *WorkerContainedInformationClient {
	return &WorkerContainedInformationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workercontainedinformation.Hooks(f(g(h())))`.
func (c *WorkerContainedInformationClient) Use(hooks ...Hook) {
	c.hooks.WorkerContainedInformation = append(c.hooks.WorkerContainedInformation, hooks...)
}

// Create returns a builder for creating a WorkerContainedInformation entity.
func (c *WorkerContainedInformationClient) Create() *WorkerContainedInformationCreate {
	mutation := newWorkerContainedInformationMutation(c.config, OpCreate)
	return &WorkerContainedInformationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkerContainedInformation entities.
func (c *WorkerContainedInformationClient) CreateBulk(builders ...*WorkerContainedInformationCreate) *WorkerContainedInformationCreateBulk {
	return &WorkerContainedInformationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkerContainedInformation.
func (c *WorkerContainedInformationClient) Update() *WorkerContainedInformationUpdate {
	mutation := newWorkerContainedInformationMutation(c.config, OpUpdate)
	return &WorkerContainedInformationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkerContainedInformationClient) UpdateOne(wci *WorkerContainedInformation) *WorkerContainedInformationUpdateOne {
	mutation := newWorkerContainedInformationMutation(c.config, OpUpdateOne, withWorkerContainedInformation(wci))
	return &WorkerContainedInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkerContainedInformationClient) UpdateOneID(id int) *WorkerContainedInformationUpdateOne {
	mutation := newWorkerContainedInformationMutation(c.config, OpUpdateOne, withWorkerContainedInformationID(id))
	return &WorkerContainedInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkerContainedInformation.
func (c *WorkerContainedInformationClient) Delete() *WorkerContainedInformationDelete {
	mutation := newWorkerContainedInformationMutation(c.config, OpDelete)
	return &WorkerContainedInformationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkerContainedInformationClient) DeleteOne(wci *WorkerContainedInformation) *WorkerContainedInformationDeleteOne {
	return c.DeleteOneID(wci.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *WorkerContainedInformationClient) DeleteOneID(id int) *WorkerContainedInformationDeleteOne {
	builder := c.Delete().Where(workercontainedinformation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkerContainedInformationDeleteOne{builder}
}

// Query returns a query builder for WorkerContainedInformation.
func (c *WorkerContainedInformationClient) Query() *WorkerContainedInformationQuery {
	return &WorkerContainedInformationQuery{
		config: c.config,
	}
}

// Get returns a WorkerContainedInformation entity by its id.
func (c *WorkerContainedInformationClient) Get(ctx context.Context, id int) (*WorkerContainedInformation, error) {
	return c.Query().Where(workercontainedinformation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkerContainedInformationClient) GetX(ctx context.Context, id int) *WorkerContainedInformation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNetworkSettings queries the network_settings edge of a WorkerContainedInformation.
func (c *WorkerContainedInformationClient) QueryNetworkSettings(wci *WorkerContainedInformation) *WorkerNetworkSettingsQuery {
	query := &WorkerNetworkSettingsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workercontainedinformation.Table, workercontainedinformation.FieldID, id),
			sqlgraph.To(workernetworksettings.Table, workernetworksettings.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, workercontainedinformation.NetworkSettingsTable, workercontainedinformation.NetworkSettingsColumn),
		)
		fromV = sqlgraph.Neighbors(wci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkerContainedInformationClient) Hooks() []Hook {
	return c.hooks.WorkerContainedInformation
}

// WorkerNetworkSettingsClient is a client for the WorkerNetworkSettings schema.
type WorkerNetworkSettingsClient struct {
	config
}

// NewWorkerNetworkSettingsClient returns a client for the WorkerNetworkSettings from the given config.
func NewWorkerNetworkSettingsClient(c config) *WorkerNetworkSettingsClient {
	return &WorkerNetworkSettingsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workernetworksettings.Hooks(f(g(h())))`.
func (c *WorkerNetworkSettingsClient) Use(hooks ...Hook) {
	c.hooks.WorkerNetworkSettings = append(c.hooks.WorkerNetworkSettings, hooks...)
}

// Create returns a builder for creating a WorkerNetworkSettings entity.
func (c *WorkerNetworkSettingsClient) Create() *WorkerNetworkSettingsCreate {
	mutation := newWorkerNetworkSettingsMutation(c.config, OpCreate)
	return &WorkerNetworkSettingsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkerNetworkSettings entities.
func (c *WorkerNetworkSettingsClient) CreateBulk(builders ...*WorkerNetworkSettingsCreate) *WorkerNetworkSettingsCreateBulk {
	return &WorkerNetworkSettingsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkerNetworkSettings.
func (c *WorkerNetworkSettingsClient) Update() *WorkerNetworkSettingsUpdate {
	mutation := newWorkerNetworkSettingsMutation(c.config, OpUpdate)
	return &WorkerNetworkSettingsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkerNetworkSettingsClient) UpdateOne(wns *WorkerNetworkSettings) *WorkerNetworkSettingsUpdateOne {
	mutation := newWorkerNetworkSettingsMutation(c.config, OpUpdateOne, withWorkerNetworkSettings(wns))
	return &WorkerNetworkSettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkerNetworkSettingsClient) UpdateOneID(id int) *WorkerNetworkSettingsUpdateOne {
	mutation := newWorkerNetworkSettingsMutation(c.config, OpUpdateOne, withWorkerNetworkSettingsID(id))
	return &WorkerNetworkSettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkerNetworkSettings.
func (c *WorkerNetworkSettingsClient) Delete() *WorkerNetworkSettingsDelete {
	mutation := newWorkerNetworkSettingsMutation(c.config, OpDelete)
	return &WorkerNetworkSettingsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkerNetworkSettingsClient) DeleteOne(wns *WorkerNetworkSettings) *WorkerNetworkSettingsDeleteOne {
	return c.DeleteOneID(wns.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *WorkerNetworkSettingsClient) DeleteOneID(id int) *WorkerNetworkSettingsDeleteOne {
	builder := c.Delete().Where(workernetworksettings.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkerNetworkSettingsDeleteOne{builder}
}

// Query returns a query builder for WorkerNetworkSettings.
func (c *WorkerNetworkSettingsClient) Query() *WorkerNetworkSettingsQuery {
	return &WorkerNetworkSettingsQuery{
		config: c.config,
	}
}

// Get returns a WorkerNetworkSettings entity by its id.
func (c *WorkerNetworkSettingsClient) Get(ctx context.Context, id int) (*WorkerNetworkSettings, error) {
	return c.Query().Where(workernetworksettings.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkerNetworkSettingsClient) GetX(ctx context.Context, id int) *WorkerNetworkSettings {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkerContainedInformation queries the worker_contained_information edge of a WorkerNetworkSettings.
func (c *WorkerNetworkSettingsClient) QueryWorkerContainedInformation(wns *WorkerNetworkSettings) *WorkerContainedInformationQuery {
	query := &WorkerContainedInformationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workernetworksettings.Table, workernetworksettings.FieldID, id),
			sqlgraph.To(workercontainedinformation.Table, workercontainedinformation.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, workernetworksettings.WorkerContainedInformationTable, workernetworksettings.WorkerContainedInformationColumn),
		)
		fromV = sqlgraph.Neighbors(wns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkerNetworkSettingsClient) Hooks() []Hook {
	return c.hooks.WorkerNetworkSettings
}
