// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/lagzi/EntSymbolBug/ent/workercontainedinformation"
	"github.com/lagzi/EntSymbolBug/ent/workernetworksettings"
)

// WorkerContainedInformation is the model entity for the WorkerContainedInformation schema.
type WorkerContainedInformation struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkerContainedInformationQuery when eager-loading is set.
	Edges WorkerContainedInformationEdges `json:"edges"`
}

// WorkerContainedInformationEdges holds the relations/edges for other nodes in the graph.
type WorkerContainedInformationEdges struct {
	// NetworkSettings holds the value of the network_settings edge.
	NetworkSettings *WorkerNetworkSettings `json:"network_settings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NetworkSettingsOrErr returns the NetworkSettings value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkerContainedInformationEdges) NetworkSettingsOrErr() (*WorkerNetworkSettings, error) {
	if e.loadedTypes[0] {
		if e.NetworkSettings == nil {
			// The edge network_settings was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workernetworksettings.Label}
		}
		return e.NetworkSettings, nil
	}
	return nil, &NotLoadedError{edge: "network_settings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkerContainedInformation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workercontainedinformation.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WorkerContainedInformation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkerContainedInformation fields.
func (wci *WorkerContainedInformation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workercontainedinformation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wci.ID = int(value.Int64)
		}
	}
	return nil
}

// QueryNetworkSettings queries the "network_settings" edge of the WorkerContainedInformation entity.
func (wci *WorkerContainedInformation) QueryNetworkSettings() *WorkerNetworkSettingsQuery {
	return (&WorkerContainedInformationClient{config: wci.config}).QueryNetworkSettings(wci)
}

// Update returns a builder for updating this WorkerContainedInformation.
// Note that you need to call WorkerContainedInformation.Unwrap() before calling this method if this WorkerContainedInformation
// was returned from a transaction, and the transaction was committed or rolled back.
func (wci *WorkerContainedInformation) Update() *WorkerContainedInformationUpdateOne {
	return (&WorkerContainedInformationClient{config: wci.config}).UpdateOne(wci)
}

// Unwrap unwraps the WorkerContainedInformation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wci *WorkerContainedInformation) Unwrap() *WorkerContainedInformation {
	_tx, ok := wci.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkerContainedInformation is not a transactional entity")
	}
	wci.config.driver = _tx.drv
	return wci
}

// String implements the fmt.Stringer.
func (wci *WorkerContainedInformation) String() string {
	var builder strings.Builder
	builder.WriteString("WorkerContainedInformation(")
	builder.WriteString(fmt.Sprintf("id=%v", wci.ID))
	builder.WriteByte(')')
	return builder.String()
}

// WorkerContainedInformations is a parsable slice of WorkerContainedInformation.
type WorkerContainedInformations []*WorkerContainedInformation

func (wci WorkerContainedInformations) config(cfg config) {
	for _i := range wci {
		wci[_i].config = cfg
	}
}
