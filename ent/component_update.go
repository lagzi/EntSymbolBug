// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lagzi/EntSymbolBug/ent/component"
	"github.com/lagzi/EntSymbolBug/ent/picture"
	"github.com/lagzi/EntSymbolBug/ent/predicate"
)

// ComponentUpdate is the builder for updating Component entities.
type ComponentUpdate struct {
	config
	hooks    []Hook
	mutation *ComponentMutation
}

// Where appends a list predicates to the ComponentUpdate builder.
func (cu *ComponentUpdate) Where(ps ...predicate.Component) *ComponentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *ComponentUpdate) SetUpdateTime(t time.Time) *ComponentUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetSomeID sets the "some_id" field.
func (cu *ComponentUpdate) SetSomeID(u uint64) *ComponentUpdate {
	cu.mutation.ResetSomeID()
	cu.mutation.SetSomeID(u)
	return cu
}

// AddSomeID adds u to the "some_id" field.
func (cu *ComponentUpdate) AddSomeID(u int64) *ComponentUpdate {
	cu.mutation.AddSomeID(u)
	return cu
}

// AddPictureIDs adds the "pictures" edge to the Picture entity by IDs.
func (cu *ComponentUpdate) AddPictureIDs(ids ...int) *ComponentUpdate {
	cu.mutation.AddPictureIDs(ids...)
	return cu
}

// AddPictures adds the "pictures" edges to the Picture entity.
func (cu *ComponentUpdate) AddPictures(p ...*Picture) *ComponentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPictureIDs(ids...)
}

// Mutation returns the ComponentMutation object of the builder.
func (cu *ComponentUpdate) Mutation() *ComponentMutation {
	return cu.mutation
}

// ClearPictures clears all "pictures" edges to the Picture entity.
func (cu *ComponentUpdate) ClearPictures() *ComponentUpdate {
	cu.mutation.ClearPictures()
	return cu
}

// RemovePictureIDs removes the "pictures" edge to Picture entities by IDs.
func (cu *ComponentUpdate) RemovePictureIDs(ids ...int) *ComponentUpdate {
	cu.mutation.RemovePictureIDs(ids...)
	return cu
}

// RemovePictures removes "pictures" edges to Picture entities.
func (cu *ComponentUpdate) RemovePictures(p ...*Picture) *ComponentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePictureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ComponentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComponentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ComponentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ComponentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ComponentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ComponentUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := component.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

func (cu *ComponentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   component.Table,
			Columns: component.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: component.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: component.FieldUpdateTime,
		})
	}
	if value, ok := cu.mutation.SomeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: component.FieldSomeID,
		})
	}
	if value, ok := cu.mutation.AddedSomeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: component.FieldSomeID,
		})
	}
	if cu.mutation.PicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.PicturesTable,
			Columns: []string{component.PicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPicturesIDs(); len(nodes) > 0 && !cu.mutation.PicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.PicturesTable,
			Columns: []string{component.PicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.PicturesTable,
			Columns: []string{component.PicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{component.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ComponentUpdateOne is the builder for updating a single Component entity.
type ComponentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ComponentMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *ComponentUpdateOne) SetUpdateTime(t time.Time) *ComponentUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetSomeID sets the "some_id" field.
func (cuo *ComponentUpdateOne) SetSomeID(u uint64) *ComponentUpdateOne {
	cuo.mutation.ResetSomeID()
	cuo.mutation.SetSomeID(u)
	return cuo
}

// AddSomeID adds u to the "some_id" field.
func (cuo *ComponentUpdateOne) AddSomeID(u int64) *ComponentUpdateOne {
	cuo.mutation.AddSomeID(u)
	return cuo
}

// AddPictureIDs adds the "pictures" edge to the Picture entity by IDs.
func (cuo *ComponentUpdateOne) AddPictureIDs(ids ...int) *ComponentUpdateOne {
	cuo.mutation.AddPictureIDs(ids...)
	return cuo
}

// AddPictures adds the "pictures" edges to the Picture entity.
func (cuo *ComponentUpdateOne) AddPictures(p ...*Picture) *ComponentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPictureIDs(ids...)
}

// Mutation returns the ComponentMutation object of the builder.
func (cuo *ComponentUpdateOne) Mutation() *ComponentMutation {
	return cuo.mutation
}

// ClearPictures clears all "pictures" edges to the Picture entity.
func (cuo *ComponentUpdateOne) ClearPictures() *ComponentUpdateOne {
	cuo.mutation.ClearPictures()
	return cuo
}

// RemovePictureIDs removes the "pictures" edge to Picture entities by IDs.
func (cuo *ComponentUpdateOne) RemovePictureIDs(ids ...int) *ComponentUpdateOne {
	cuo.mutation.RemovePictureIDs(ids...)
	return cuo
}

// RemovePictures removes "pictures" edges to Picture entities.
func (cuo *ComponentUpdateOne) RemovePictures(p ...*Picture) *ComponentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePictureIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ComponentUpdateOne) Select(field string, fields ...string) *ComponentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Component entity.
func (cuo *ComponentUpdateOne) Save(ctx context.Context) (*Component, error) {
	var (
		err  error
		node *Component
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComponentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Component)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ComponentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ComponentUpdateOne) SaveX(ctx context.Context) *Component {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ComponentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ComponentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ComponentUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := component.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

func (cuo *ComponentUpdateOne) sqlSave(ctx context.Context) (_node *Component, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   component.Table,
			Columns: component.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: component.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Component.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, component.FieldID)
		for _, f := range fields {
			if !component.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != component.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: component.FieldUpdateTime,
		})
	}
	if value, ok := cuo.mutation.SomeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: component.FieldSomeID,
		})
	}
	if value, ok := cuo.mutation.AddedSomeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: component.FieldSomeID,
		})
	}
	if cuo.mutation.PicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.PicturesTable,
			Columns: []string{component.PicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPicturesIDs(); len(nodes) > 0 && !cuo.mutation.PicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.PicturesTable,
			Columns: []string{component.PicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.PicturesTable,
			Columns: []string{component.PicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Component{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{component.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
