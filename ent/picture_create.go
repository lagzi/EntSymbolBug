// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lagzi/EntSymbolBug/ent/component"
	"github.com/lagzi/EntSymbolBug/ent/picture"
	"github.com/lagzi/EntSymbolBug/ent/user"
)

// PictureCreate is the builder for creating a Picture entity.
type PictureCreate struct {
	config
	mutation *PictureMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pc *PictureCreate) SetCreateTime(t time.Time) *PictureCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *PictureCreate) SetNillableCreateTime(t *time.Time) *PictureCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *PictureCreate) SetUpdateTime(t time.Time) *PictureCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *PictureCreate) SetNillableUpdateTime(t *time.Time) *PictureCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetOtherImportantThing sets the "other_important_thing" field.
func (pc *PictureCreate) SetOtherImportantThing(s string) *PictureCreate {
	pc.mutation.SetOtherImportantThing(s)
	return pc
}

// SetTimestamp sets the "timestamp" field.
func (pc *PictureCreate) SetTimestamp(t time.Time) *PictureCreate {
	pc.mutation.SetTimestamp(t)
	return pc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pc *PictureCreate) SetUserID(id int) *PictureCreate {
	pc.mutation.SetUserID(id)
	return pc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pc *PictureCreate) SetNillableUserID(id *int) *PictureCreate {
	if id != nil {
		pc = pc.SetUserID(*id)
	}
	return pc
}

// SetUser sets the "user" edge to the User entity.
func (pc *PictureCreate) SetUser(u *User) *PictureCreate {
	return pc.SetUserID(u.ID)
}

// SetComponentID sets the "component" edge to the Component entity by ID.
func (pc *PictureCreate) SetComponentID(id int) *PictureCreate {
	pc.mutation.SetComponentID(id)
	return pc
}

// SetNillableComponentID sets the "component" edge to the Component entity by ID if the given value is not nil.
func (pc *PictureCreate) SetNillableComponentID(id *int) *PictureCreate {
	if id != nil {
		pc = pc.SetComponentID(*id)
	}
	return pc
}

// SetComponent sets the "component" edge to the Component entity.
func (pc *PictureCreate) SetComponent(c *Component) *PictureCreate {
	return pc.SetComponentID(c.ID)
}

// Mutation returns the PictureMutation object of the builder.
func (pc *PictureCreate) Mutation() *PictureMutation {
	return pc.mutation
}

// Save creates the Picture in the database.
func (pc *PictureCreate) Save(ctx context.Context) (*Picture, error) {
	var (
		err  error
		node *Picture
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PictureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Picture)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PictureMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PictureCreate) SaveX(ctx context.Context) *Picture {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PictureCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PictureCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PictureCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := picture.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := picture.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PictureCreate) check() error {
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Picture.create_time"`)}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Picture.update_time"`)}
	}
	if _, ok := pc.mutation.OtherImportantThing(); !ok {
		return &ValidationError{Name: "other_important_thing", err: errors.New(`ent: missing required field "Picture.other_important_thing"`)}
	}
	if _, ok := pc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Picture.timestamp"`)}
	}
	return nil
}

func (pc *PictureCreate) sqlSave(ctx context.Context) (*Picture, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PictureCreate) createSpec() (*Picture, *sqlgraph.CreateSpec) {
	var (
		_node = &Picture{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: picture.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: picture.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: picture.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: picture.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.OtherImportantThing(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: picture.FieldOtherImportantThing,
		})
		_node.OtherImportantThing = value
	}
	if value, ok := pc.mutation.Timestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: picture.FieldTimestamp,
		})
		_node.Timestamp = value
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   picture.UserTable,
			Columns: []string{picture.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_user_picture = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   picture.ComponentTable,
			Columns: []string{picture.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: component.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.component_pictures = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PictureCreateBulk is the builder for creating many Picture entities in bulk.
type PictureCreateBulk struct {
	config
	builders []*PictureCreate
}

// Save creates the Picture entities in the database.
func (pcb *PictureCreateBulk) Save(ctx context.Context) ([]*Picture, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Picture, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PictureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PictureCreateBulk) SaveX(ctx context.Context) []*Picture {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PictureCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PictureCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
